
# http://twig.sensiolabs.org/doc/templates.html#template-inheritance
# http://blog.lazycloud.net/symfony2-twig-cheatsheet/
# http://willthemoor.github.io/Twig-Cheat-Sheet/
# http://www.symfony2cheatsheet.com/#templating


themestructure:
    title: Sample theme structure
    width: 3
    prefix: "This is the common structure of a bolt theme. The files are located in `themes/`. Define the theme to be used with the `theme:` setting in the global `config.yml`."
    table: 
        - [ Filename, Function, Example link ]
        - [ index.twig, Homepage of the site, / ]
        - [ listing.twig, "listing page for overview of pages, entries or listings per category or searchresults", "/entries /tags/movies /search?search=lorem" ]
        - [ entry.twig, "single page for a record of the 'entries' contenttype" , "/entry/lorum-ipsum"   ]
        - [ record.twig, "fallback single template for any contenttype that doesn't have its own single record template", "/showcase/dolor-sit"    ]
        - [ _aside.twig, template for the sidebar ]
        - [ _footer.twig, template for the common footer of all pages ]
        - [ _header.twig, template for the common header of all pages ]
        - [ _recordfooter.twig, meta-information for a single page or record ]
        - [ _sub_menu.twig, template for the markup of the menu. See also `menu.yml` for the contents ]
        - [ _sub_searchbox.twig, template for the markup for the search box. ]
        - [ images/, graphical assets used in the theme ]
        - [ javascripts/, any used javascripts should go in here ]
        - [ css/, contains the (compiled) CSS for the theme ]
        - [ scss/, "optional folder for Sass source files, to be compiled into CSS." ]
        - [ config.yml, optional config file with settings specific to the theme. ]
    links: { "Templates and routing": https://docs.bolt.cm/templates-routes }

contenttypes: 
    title: Contenttypes.yml
    width: 2
    prefix: | 
        The contenttypes in Bolt are defined in the file `app/config/contenttypes.yml`. You can edit 
        this file directly, or from within  the Bolt interface under 'Settings' > 'Contenttypes'. 
    table: 
        - [ Key, Function ]
        - [ `name`, "The name of the Contenttype, should be plural." ]
        - [ `singular_name`, "The name of one record in the Contenttype. Should be singular. " ]
        - [ `slug` ,"(optional) This determines the slug of the contenttype, and therefore the URLs that are generated for this contenttype." ]
        - [ `singular_slug` ,"(optional) This determines the slug of the a single record in this contenttype, and therefore the URLs that are generated." ]
        - [ `description` ,"(optional) A short description of the contenttype. " ]
        - [ `fields`, "The fields that make up the content in this contenttype. See the section [Field definitions](#field-definitions-contenttypesyml) for details." ]
        - [ `taxonomy`, "An array listing the different taxonomies used by this contenttype. See the section on [Taxonomies](#taxonomies) for details." ]
        - [ `relations`, "An array listing the different relations available to this contenttype. See the section on [Relations](/relations) for details." ]
        - [ `record_template`, "The default template to use, when displaying a single Record of this Contenttype. " ]
        - [ `listing_template`, "The default template to use, when displaying an overview of Records of this Contenttype. " ]
        - [ `listing_records`, "The amount of records to show on a single overview page in the frontend." ]
        - [ `sort` ,"(optional) The default sorting of this contenttype. For example `-datecreated`." ]
        - [ `recordsperpage` ,"(optional) The amount of records shown on each page in the Bolt backend. If there are more records, they will be paginated." ]
        - [ `show_on_dashboard` ,"(optional) When set to `false` the contenttype will not appear in the 'Recently edited &hellip;' list on the Dashboard page." ]
        - [ `default_status` ,"(optional) Use this to set the default status for new records in this contenttype, like `published`, `held`, `draft` or `timed`." ]
        - [ `searchable` ,"(optional) A boolean value to determine whether this contenttype should show up in searchresults. " ]
        - [ `icon` ,"(optional) A [Font Awesome](http://fortawesome.github.io/Font-Awesome/) icon to be used in the sidebar for this contenttype. For example: `cubes`" ]
        - [ `icon_singular` ,"(optional) A [Font Awesome](http://fortawesome.github.io/Font-Awesome/) icon to be used in the sidebar for a single record of this contenttype. For example: `cube`." ]
    links: { "Defining contenttypes in the docs": "https://docs.bolt.cm/v20/content#defining-contenttypes" }

fielddefinitions:
    title: Field definitions in contenttypes.yml
    width: 2
    prefix: The `fields` option in a contenttpe lists the fields for that contenttype. The available fields are below. See also [Field options](#fieldoptions) 
    table: 
        - [ Key, function ]
        - [ `text`, "Simple text-input, for single-line fields "]
        - [ `slug`, "The slug is a required field, but you can include it in the fields list to customize it. "]
        - [ `image`, "Simple image upload/select field.  "]
        - [ `imagelist`, "A field to create a list of images. Useful for slideshows and imagesliders. "]
        - [ `file`, "Simple file upload/select field. Also set `extensions` and the global setting for `accept_file_types` in the main `config.yml`. "]
        - [ `filelist`, "A more complex upload/select field. "]
        - [ `html`, "Wysiwyg HTML field. "]
        - [ `textarea`, "Simple multi-line textarea input, for longer texts without HTML markup. "]
        - [ `select`, "A drop-down list to make a pre-defined selection from.  "]
        - [ `video`, "A set of fields for embedding videos from websites like Youtube and Vimeo. "]
        - [ `geolocation`, "A set of fields for easy selection of a geolocation (latitude/longitude). "]
        - [ `date`, "Datepicker widget, to set/select a date. "]
        - [ `datetime`, "Similar to the `date` field, but adds an additional field for time. "]
        - [ `integer`, "A field to store whole, integer numbers. "]
        - [ `float`, "A field to store (floating point value) numbers. "]
    links: { "Field definitions in the docs": "https://docs.bolt.cm/v20/content#field-definitions" }

fieldoptions:
    title: Field options in contenttypes.yml
    width: 2
    prefix: Each field in the contenttype is an array with several options. The available options are below. See also [Field definitions](#fielddefinitions) 
    table: 
        - [ Key, function ]
        - [ "`class: large`", "Will show the field in a larger font, for `text` fields." ]
        - [ "`class: wide`", "Will show the field extra wide, for filling out the column. `text` fields only." ]
        - [ "`class: narrow`", "Will show the field narrow, for fields that should take only a couple of characters. For `text` fields only." ]
        - [ "`variant: inline`", "Will show the field to the right of the label, taking up less space vertically. For `text` fields only." ]
        - [ "`label: Foo`", "If omitted, the name of the field will be used as a label in the edit-screen. Replace 'Foo' with the desired label of the field." ]
        - [ "`height: 150px`", "For `html` and `textarea` fields, this will determine the height in the edit-screen." ]
        - [ "`index: true`", "Add a database index for this field, use with caution." ]
        - [ "`prefix: ..`", "Text to add before the field. " ]
        - [ "`postfix: ..`", "Text to add after the field. " ]
        - [ "`default: ..`", "The default value for a field, if applicable. See below for an example." ]
        - [ "`required: true`", "Use this to make a field required. " ]
        - [ "`readonly: true`", "Use this to make a field readonly. Only works on `float`, `integer` and `text` fields." ]
        - [ "`pattern: ..`", "Use this to validate a field against a certain pattern, using Regular Expression. " ]
        - [ "`allowtwig: true`", "Explicitly allow twig to be used in this field. " ]
        - [ "`info: ..`", "Use for displaying extra information about the field." ]
        - [ "`extensions: [ .. ]`", "A list of allowed file extensions for uploading. Used with `file`, `filelist`, `image` and `imageli" ]
    links: { "Field definitions in the docs": "https://docs.bolt.cm/v20/content#field-definitions" }

relations:
    title: Relationships
    width: 2
    links: { "Relationships in the docs": "http://bolt-docs.localhost/relationships"}

taxonomies:
    title: Taxonomies
    width: 2
    links: { "Taxonomies in the docs": "http://bolt-docs.localhost/taxonomies"}

setcontent: 
    title: "The `{% setcontent %}` tag"
    width: 2
    prefix: "The `{% setcontent %}` tag is one of the most important tags in Bolt, because it allows you to get content in any location to use however you need."
    table:
        - [ Parameter, Function ]
        - [ variable name, The first parameter (before the '=') is always the variable that will contain the result set ]
        - [ 'contenttype', The name of the contenttype to fetch records from ] 
        - [ 'contenttype/latest/10', get the latest 10 records from `contenttype` ]        
        - [ 'contenttype/slug', get the record from `contenttype` with the slug `slug` ]        
        - [ 'contenttype/123', get the record from `contenttype` with the id `123` ]   
        - [ "where { username: 'bob' }", "use `where` to define what needs to be fetched."]                             
        - [ "where { title: '%ipsum%' }", "use `%` in your `where` statement to use 'LIKE' matching."]
        - [ "where { tags: 'book || movie' }", "you can also use taxonomies in your `where`."]
        - [ "where { datepublish: '<today' }", "use shortcuts like 'now', 'today', 'tomorrow' for date selection."]
    links: { "{% setcontent %} in the documentation": https://docs.bolt.cm/content-fetching }

debug: 
    title: "Debugging bolt"
    width: 2
    prefix: |
        If you’re coding and you want to get a quick look at whatever variable or object you’re trying to manipulate, you can dump its contents to the browser. In templates, use the following:
        The variable can be a normal variable, a Record or multiple records of Content, or other stuff.    
    table: 
        - [Code, Function]
        - ["`{{ dump(variable) }}`", Dump 'variable' in the template. ]
        - ["`\Dumper::dump($variable);`", Dump 'variable' in your code. ]
        - ["`{{ backtrace() }}`", "Get a backtrace throught the code to the current point in the execution, in the template." ]
        - ["`\Dumper::backtrace(10);`", " Get a backtrace throught the code to the current point in the execution, in your code. The optional parameter denotes the maximum depth of the output of the backtrace." ]
    links: { "{{ dump() }} in the documentation": "https://docs.bolt.cm/internals#-dump-and-dumperdump" }


apppath: 
    title: "The `paths` variable"
    width: 2
    prefix: "To see the current paths use `{{ dump(paths) }}` in a template. Use a specific path like this: `{{ paths.theme }}`. In PHP these are available as `$this->app['paths']`."
    table: 
        - ["Key", "Value"]
        - ["app", "/app/"]
        - ["async", "/async/"]
        - ["bolt", "/admin/"]
        - ["upload", "/upload/"]
        - ["files", "/files/"]
        - ["extensions", "/extensions/"]
        - ["root", "/"]
        - ["currenturl", "http://example.com/entry/lorum-ipsum"]
        - ["current", "/entry/lorum-ipsum"]
        - ["hostname", "example.com"]
        - ["hosturl", "http://example.com"]
        - ["canonical", "example.com"]
        - ["canonicalurl", "http://example.com/entry/lorum-ipsum"]
        - ["protocol", "http"]
        - ["rooturl", "http://example.com/"]
        - ["theme", "/theme/base-2014/"]
        - ["apppath", "/[path]/app"]
        - ["cachepath", "/[path]/app/cache"]
        - ["configpath", "/[path]/app/config"]
        - ["databasepath", "/[path]/app/database"]
        - ["extensionsconfigpath", "/[path]/app/config/extensions"]
        - ["extensionspath", "/[path]/extensions"]
        - ["filespath", "/[path]/files"]
        - ["rootpath", "/[path]/bolt"]
        - ["themebasepath", "/[path]/theme"]
        - ["themepath", "/[path]/theme/base-2014"]
        - ["webpath", "/[path]/bolt"]
    links: { "app['paths'] in the docs": "https://docs.bolt.cm/v20/internals#app8216paths8217" }

# Twig sections

twig: 
    title: Twig
    width: 2
    prefix: "The templates in Bolt are written in Twig. This is a fast, flexible and elegant templating language."
    table: 
        - [ "Syntax", "Meaning"]
        - [ "`{{ … }}`", "Output someting, like 'echo' or 'print'."]
        - [ "`{% … %}`", "Do someting, like 'for', 'if' or 'setcontent'."]
        - [ "`{# … #}`", "Do nothing, this is a comment."]
        - [ "`foo`", "A variable named 'foo'." ]
        - [ "`5`, `3.1415`", "Integers and floating point numbers can be used as-is."]
        - [ "`'foo'`", "A literal sting, that has the value 'foo'." ]
        - [ "`['foo', 'bar', 5]`", "An array containing three elements." ]
        - [ "`{'a': 'foo', 'b': 5}`", "A hash is a list of keys and value-pairs, separated by a comma." ]

twigsettingvariables: 
    title: Setting variables
    width: 2
    prefix: "The templates in Bolt are written in Twig. This is a fast, flexible and elegant templating language."
    table: 
        - [ "Syntax", "Meaning"]
        - [ "`{% set foo = 'bar' %}`", "Set the variable `foo` to contain the string `bar`."]
        - [ "`{% set foo = [1, 2, 3] %}`", "You can set variables to contain literals, arrays, hashes, etc."]
        - [ "`{% set foo = 'Hello ' ~ name %}`<br>`{% set foo = foo|merge(bar) %}`", "Use set to append strings or merge arrays."]

twiginclude:
    title: Including other templates
    width: 3
    prefix: | 
        Use this to include another Twig template in the current template.
        Twig parses the template like any other template, so you can use any
        tags in your included template that you would use in the ‘main’
        template. You can also use `include` inside the included templates."
    table: 
        - [ "Syntax", "Meaning"]
        - [ "`{% include '_header.twig' %}`", "Includes the file `_header.twig`."]
        - [ "`{% set vars = {'title': 'Hello, world.'} %}`<br>`{% include '_header.twig' with vars %}`", "You can set variables to contain literals, arrays, hashes, etc."]
        - [ "`{% set foo = 'Hello ' ~ name %}`<br>`{% set foo = foo|merge(bar) %}`", "Use set to append strings or merge arrays."]
    postfix: | 
        An alternative to using 'include', is to set up your templates using Template
        Inheritance. This is a method of defining a base template, and then expand it in
        more detail in the templates that extend this base template. See the section on
        [Template inheritance](http://twig.sensiolabs.org/doc/templates.html#template-inheritance) on the twig website.
    links: 
        "Including other templates": "http://twig.sensiolabs.org/doc/templates.html#including-other-templates"
        "Template inheritance": "http://twig.sensiolabs.org/doc/templates.html#template-inheritance"

twigmacro:
    title: Macros in Twig
    width: 2
    prefix: |
        Macros in Twig can be thought of as functions in PHP or Javascript. 
    table:
        - ["Syntax", "Explanation"]
        - [ "`{% macro foo(var) %}`<br>`Foo and {{ var }}`<br>`{% endmacro %}`", "Define a macro in '_macros.twig'"]
        - [ "`{% import '_macros.twig' as m %}`", "Import the macros in your template."]
        - [ "`{{ m.foo('bar') }}`", "Call the macro in your template."]
    postfix: | 
        If you've defined the macros in the same file, you need to import them, using `_self`:  
        `{% import _self as macro %}`

twigcontrol:
    title: Twig control structures
    width: 2
    links:
        "For in the Twig docs": "http://twig.sensiolabs.org/doc/tags/for.html"
        "If in the Twig docs": "http://twig.sensiolabs.org/doc/tags/if.html"

twigfunctions:
    title: Functions in Twig
    width: 2


twigfilters:
    title: Filters in Twig
    width: 2

twigvariables:
    title: Default variables in Twig
    width: 2


